import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../app';
import { 
  markNotificationAsRead, 
  markAllNotificationsAsRead, 
  clearNotifications,
  Notification 
} from '../features/notifications/notificationsSlice';
import {
  Box,
  Button,
  Card,
  CardContent,
  Chip,
  Divider,
  IconButton,
  List,
  ListItem,
  ListItemAvatar,
  ListItemSecondaryAction,
  ListItemText,
  Menu,
  MenuItem,
  Paper,
  Stack,
  Tab,
  Tabs,
  Typography,
  Avatar,
  Tooltip,
  Alert,
  ButtonGroup
} from '@mui/material';
import {
  Delete as DeleteIcon,
  MoreVert as MoreVertIcon,
  NotificationsActive as NotificationsActiveIcon,
  NotificationsNone as NotificationsNoneIcon,
  ShoppingCart as ShoppingCartIcon,
  Person as PersonIcon,
  Inventory as InventoryIcon,
  Assignment as AssignmentIcon,
  AttachMoney as AttachMoneyIcon,
  Warning as WarningIcon,
  CheckCircle as CheckCircleIcon,
  ErrorOutline as ErrorOutlineIcon,
  Info as InfoIcon,
  DoneAll as DoneAllIcon,
  FilterList as FilterListIcon
} from '@mui/icons-material';
import { formatDistanceToNow } from 'date-fns';

interface TabPanelProps {
  children?: React.ReactNode;
  index: number;
  value: number;
}

function TabPanel(props: TabPanelProps) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ py: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

// Object mapping notification types to icons
const NOTIFICATION_ICONS: Record<string, React.ReactNode> = {
  'order': <ShoppingCartIcon />,
  'user': <PersonIcon />,
  'inventory': <InventoryIcon />,
  'task': <AssignmentIcon />,
  'payment': <AttachMoneyIcon />,
  'alert': <WarningIcon />,
  'info': <InfoIcon />,
  'success': <CheckCircleIcon />,
  'warning': <WarningIcon />,
  'error': <ErrorOutlineIcon />,
  'default': <NotificationsActiveIcon />
};

// Object mapping notification types to colors
const NOTIFICATION_COLORS: Record<string, string> = {
  'order': 'primary.main',
  'user': 'info.main',
  'inventory': 'warning.main',
  'task': 'secondary.main',
  'payment': 'success.main',
  'alert': 'error.main',
  'info': 'info.main',
  'success': 'success.main',
  'warning': 'warning.main',
  'error': 'error.main',
  'default': 'primary.main'
};

const NotificationsList: React.FC = () => {
  const dispatch = useDispatch();
  const { notifications } = useSelector((state: RootState) => state.notifications);
  const [tabValue, setTabValue] = useState(0);
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [selectedNotification, setSelectedNotification] = useState<Notification | null>(null);
  const [filterAnchorEl, setFilterAnchorEl] = useState<null | HTMLElement>(null);
  const [typeFilter, setTypeFilter] = useState<string | null>(null);

  const handleTabChange = (_event: React.SyntheticEvent, newValue: number) => {
    setTabValue(newValue);
  };

  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, notification: Notification) => {
    setAnchorEl(event.currentTarget);
    setSelectedNotification(notification);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    setSelectedNotification(null);
  };

  const handleFilterOpen = (event: React.MouseEvent<HTMLElement>) => {
    setFilterAnchorEl(event.currentTarget);
  };

  const handleFilterClose = () => {
    setFilterAnchorEl(null);
  };

  const handleSelectFilter = (type: string | null) => {
    setTypeFilter(type);
    handleFilterClose();
  };

  const handleMarkAsRead = (notification: Notification) => {
    dispatch(markNotificationAsRead(notification.id));
    handleMenuClose();
  };

  const handleMarkAllAsRead = () => {
    dispatch(markAllNotificationsAsRead());
  };

  const handleClearAll = () => {
    dispatch(clearNotifications());
  };

  // Filter notifications based on tab and type filter
  const filteredNotifications = notifications.filter(notification => {
    const matchesTab = tabValue === 0 || 
                       (tabValue === 1 && notification.isRead) || 
                       (tabValue === 2 && !notification.isRead);
    const matchesTypeFilter = !typeFilter || notification.type === typeFilter;
    return matchesTab && matchesTypeFilter;
  });

  // Get unique notification types for filter
  const notificationTypes = Array.from(new Set(notifications.map(n => n.type)));

  // Format timestamp to relative time
  const formatTimestamp = (timestamp: string) => {
    try {
      return formatDistanceToNow(new Date(timestamp), { addSuffix: true });
    } catch (error) {
      return 'Unknown time';
    }
  };

  // Get the icon for a notification type
  const getNotificationIcon = (type: string) => {
    return NOTIFICATION_ICONS[type] || NOTIFICATION_ICONS['default'];
  };

  // Get the color for a notification type
  const getNotificationColor = (type: string) => {
    return NOTIFICATION_COLORS[type] || NOTIFICATION_COLORS['default'];
  };

  // Get the label for a filter option
  const getFilterLabel = (type: string) => {
    return type.charAt(0).toUpperCase() + type.slice(1);
  };

  return (
    <Box>
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h4" fontWeight={700}>
          Notifications
        </Typography>
        <ButtonGroup variant="outlined" size="small">
          <Button
            startIcon={<DoneAllIcon />}
            onClick={handleMarkAllAsRead}
            disabled={!notifications.some(n => !n.isRead)}
          >
            Mark All Read
          </Button>
          <Button
            startIcon={<FilterListIcon />}
            onClick={handleFilterOpen}
            color={typeFilter ? 'primary' : 'inherit'}
          >
            Filter
          </Button>
          <Button
            startIcon={<DeleteIcon />}
            onClick={handleClearAll}
            disabled={notifications.length === 0}
            color="error"
          >
            Clear All
          </Button>
        </ButtonGroup>
      </Box>

      {/* Filter Menu */}
      <Menu
        anchorEl={filterAnchorEl}
        open={Boolean(filterAnchorEl)}
        onClose={handleFilterClose}
        transformOrigin={{ horizontal: 'right', vertical: 'top' }}
        anchorOrigin={{ horizontal: 'right', vertical: 'bottom' }}
      >
        <MenuItem onClick={() => handleSelectFilter(null)}>
          <ListItemText primary="All Types" />
        </MenuItem>
        <Divider />
        {notificationTypes.map(type => (
          <MenuItem key={type} onClick={() => handleSelectFilter(type)}>
            <ListItemAvatar>
              <Avatar sx={{ bgcolor: `${getNotificationColor(type)}15`, color: getNotificationColor(type) }}>
                {getNotificationIcon(type)}
              </Avatar>
            </ListItemAvatar>
            <ListItemText primary={getFilterLabel(type)} />
          </MenuItem>
        ))}
      </Menu>

      {/* Tabs */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange}
          indicatorColor="primary"
          textColor="primary"
        >
          <Tab label="All" />
          <Tab label="Read" />
          <Tab label="Unread" />
        </Tabs>
      </Box>

      {/* Tab Panels */}
      <TabPanel value={tabValue} index={0}>
        <NotificationsContent notifications={filteredNotifications} handleMenuOpen={handleMenuOpen} formatTimestamp={formatTimestamp} getNotificationIcon={getNotificationIcon} getNotificationColor={getNotificationColor} />
      </TabPanel>
      <TabPanel value={tabValue} index={1}>
        <NotificationsContent notifications={filteredNotifications} handleMenuOpen={handleMenuOpen} formatTimestamp={formatTimestamp} getNotificationIcon={getNotificationIcon} getNotificationColor={getNotificationColor} />
      </TabPanel>
      <TabPanel value={tabValue} index={2}>
        <NotificationsContent notifications={filteredNotifications} handleMenuOpen={handleMenuOpen} formatTimestamp={formatTimestamp} getNotificationIcon={getNotificationIcon} getNotificationColor={getNotificationColor} />
      </TabPanel>

      {/* Notification Actions Menu */}
      <Menu
        anchorEl={anchorEl}
        open={Boolean(anchorEl)}
        onClose={handleMenuClose}
      >
        {selectedNotification && !selectedNotification.isRead && (
          <MenuItem onClick={() => handleMarkAsRead(selectedNotification)}>
            <ListItemIcon>
              <CheckCircleIcon fontSize="small" color="primary" />
            </ListItemIcon>
            <ListItemText primary="Mark as read" />
          </MenuItem>
        )}
        {selectedNotification?.actionUrl && (
          <MenuItem>
            <ListItemIcon>
              <InfoIcon fontSize="small" color="primary" />
            </ListItemIcon>
            <ListItemText primary="View details" />
          </MenuItem>
        )}
      </Menu>
    </Box>
  );
};

// Sub-component for rendering the notifications content
interface NotificationsContentProps {
  notifications: Notification[];
  handleMenuOpen: (event: React.MouseEvent<HTMLElement>, notification: Notification) => void;
  formatTimestamp: (timestamp: string) => string;
  getNotificationIcon: (type: string) => React.ReactNode;
  getNotificationColor: (type: string) => string;
}

const NotificationsContent: React.FC<NotificationsContentProps> = ({ 
  notifications, 
  handleMenuOpen, 
  formatTimestamp,
  getNotificationIcon,
  getNotificationColor
}) => {
  if (notifications.length === 0) {
    return (
      <Box sx={{ textAlign: 'center', py: 8 }}>
        <Avatar 
          sx={{ 
            width: 80, 
            height: 80, 
            bgcolor: 'grey.100', 
            color: 'text.secondary',
            mx: 'auto',
            mb: 2 
          }}
        >
          <NotificationsNoneIcon sx={{ fontSize: 40 }} />
        </Avatar>
        <Typography variant="h6" color="text.secondary">
          No notifications to display
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Any new notifications will appear here
        </Typography>
      </Box>
    );
  }

  return (
    <Card variant="outlined">
      <List sx={{ p: 0 }}>
        {notifications.map((notification, index) => (
          <React.Fragment key={notification.id}>
            <ListItem 
              alignItems="flex-start"
              sx={{ 
                bgcolor: notification.isRead ? 'transparent' : 'action.hover',
                transition: 'background-color 0.3s',
                '&:hover': { bgcolor: 'action.selected' }
              }}
            >
              <ListItemAvatar>
                <Avatar 
                  sx={{ 
                    bgcolor: `${getNotificationColor(notification.type)}15`, 
                    color: getNotificationColor(notification.type)
                  }}
                >
                  {getNotificationIcon(notification.type)}
                </Avatar>
              </ListItemAvatar>
              <ListItemText
                primary={
                  <Typography variant="subtitle1" fontWeight={notification.isRead ? 400 : 600}>
                    {notification.title}
                    {!notification.isRead && (
                      <Chip 
                        label="New" 
                        size="small" 
                        color="primary" 
                        sx={{ ml: 1, height: 20, fontSize: '0.7rem' }} 
                      />
                    )}
                  </Typography>
                }
                secondary={
                  <React.Fragment>
                    <Typography
                      component="span"
                      variant="body2"
                      color="text.primary"
                      sx={{ display: 'block', mb: 0.5 }}
                    >
                      {notification.content}
                    </Typography>
                    <Typography
                      component="span"
                      variant="caption"
                      color="text.secondary"
                    >
                      {formatTimestamp(notification.createdAt || notification.timestamp || '')}
                    </Typography>
                  </React.Fragment>
                }
              />
              <ListItemSecondaryAction>
                <Tooltip title="More options">
                  <IconButton edge="end" onClick={(e) => handleMenuOpen(e, notification)}>
                    <MoreVertIcon />
                  </IconButton>
                </Tooltip>
              </ListItemSecondaryAction>
            </ListItem>
            {index < notifications.length - 1 && <Divider variant="inset" component="li" />}
          </React.Fragment>
        ))}
      </List>
    </Card>
  );
};

export default NotificationsList; 